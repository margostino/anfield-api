package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"

	"github.com/margostino/anfield-api/graph/model"
)

// Team is the resolver for the team field.
func (r *queryResolver) Team(ctx context.Context, id string) (*model.Team, error) {
	return &model.Team{
		ID:   "1",
		Name: "Liverpool",
	}, nil
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context) ([]*model.Team, error) {
	response, err := http.Get("https://fantasy.premierleague.com/api/bootstrap-static/")
	defer response.Body.Close()
	var fplResponse model.FplResponse
	if err != nil {
		fmt.Printf("The HTTP request failed with error %s\n", err)
	} else {
		body, _ := io.ReadAll(response.Body)
		if err := json.Unmarshal(body, &fplResponse); err != nil {
			log.Fatalf("An Error Occured %v", err)
		}
	}

	// loop into fplResponse.Teams and create a model.Team for each one
	teams := make([]*model.Team, len(fplResponse.Teams))
	for i, team := range fplResponse.Teams {
		teams[i] = &model.Team{
			ID:        strconv.Itoa(team.Code),
			Name:      team.Name,
			ShortName: team.ShortName,
		}
	}
	return teams, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
