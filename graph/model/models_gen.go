// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// Represents the usage of a game strategy or special play, known as a 'chip'.
type ChipPlay struct {
	ChipName  string `json:"chipName"`
	NumPlayed int    `json:"numPlayed"`
}

// Comprehensive information about a specific Gameweek including its fixtures and related data.
type Event struct {
	ID                     int             `json:"id"`
	Name                   string          `json:"name"`
	DeadlineTime           string          `json:"deadlineTime"`
	AverageEntryScore      int             `json:"averageEntryScore"`
	Finished               bool            `json:"finished"`
	DataChecked            bool            `json:"dataChecked"`
	HighestScoringEntry    int             `json:"highestScoringEntry"`
	DeadlineTimeEpoch      int             `json:"deadlineTimeEpoch"`
	DeadlineTimeGameOffset int             `json:"deadlineTimeGameOffset"`
	HighestScore           int             `json:"highestScore"`
	IsPrevious             bool            `json:"isPrevious"`
	IsCurrent              bool            `json:"isCurrent"`
	IsNext                 bool            `json:"isNext"`
	CupLeaguesCreated      bool            `json:"cupLeaguesCreated"`
	H2hKoMatchesCreated    bool            `json:"h2hKoMatchesCreated"`
	RankedCount            int             `json:"rankedCount"`
	ChipPlays              []*ChipPlay     `json:"chipPlays"`
	MostSelected           int             `json:"mostSelected"`
	MostTransferredIn      int             `json:"mostTransferredIn"`
	TopElement             int             `json:"topElement"`
	TopElementInfo         *TopElementInfo `json:"topElementInfo"`
	TransfersMade          int             `json:"transfersMade"`
	MostCaptained          int             `json:"mostCaptained"`
	MostViceCaptained      int             `json:"mostViceCaptained"`
	Fixtures               []*Fixture      `json:"fixtures"`
}

// Details of a specific fixture in a football tournament including scores, times, and team information.
type Fixture struct {
	Code                 int     `json:"code"`
	Event                *int    `json:"event,omitempty"`
	Finished             *bool   `json:"finished,omitempty"`
	FinishedProvisional  *bool   `json:"finishedProvisional,omitempty"`
	ID                   int     `json:"id"`
	KickoffTime          *string `json:"kickoffTime,omitempty"`
	Minutes              *int    `json:"minutes,omitempty"`
	ProvisionalStartTime *bool   `json:"provisionalStartTime,omitempty"`
	Started              *bool   `json:"started,omitempty"`
	TeamA                *int    `json:"teamA,omitempty"`
	TeamAName            *string `json:"teamAName,omitempty"`
	TeamAScore           *int    `json:"teamAScore,omitempty"`
	TeamH                *int    `json:"teamH,omitempty"`
	TeamHName            *string `json:"teamHName,omitempty"`
	TeamHScore           *int    `json:"teamHScore,omitempty"`
	Stats                []*Stat `json:"stats,omitempty"`
	TeamHDifficulty      *int    `json:"teamHDifficulty,omitempty"`
	TeamADifficulty      *int    `json:"teamADifficulty,omitempty"`
	PulseID              *int    `json:"pulseId,omitempty"`
	TeamAPulseID         *int    `json:"teamAPulseId,omitempty"`
	TeamHPulseID         *int    `json:"teamHPulseId,omitempty"`
}

// Information about a specific Gameweek including matchups between teams, scores, and location.
type Gameweek struct {
	Kickoff    string `json:"kickoff"`
	TeamAName  string `json:"teamAName"`
	ScoreTeamA int    `json:"scoreTeamA"`
	TeamHName  string `json:"teamHName"`
	ScoreTeamH int    `json:"scoreTeamH"`
	Stadium    string `json:"stadium"`
}

// Head-to-Head (H2H) statistics comparing two teams, including their previous matchups.
type H2h struct {
	StatsTeamA []*StatsTeam `json:"statsTeamA,omitempty"`
	StatsTeamH []*StatsTeam `json:"statsTeamH,omitempty"`
	Gameweeks  []*Gameweek  `json:"gameweeks,omitempty"`
}

// Represents a player in a football team, including detailed statistics and performance data.
type Player struct {
	ID                               int            `json:"id"`
	FirstName                        string         `json:"firstName"`
	SecondName                       string         `json:"secondName"`
	WebName                          string         `json:"webName"`
	News                             string         `json:"news"`
	NewsAdded                        string         `json:"newsAdded"`
	Team                             string         `json:"team"`
	Position                         PlayerPosition `json:"position"`
	ChanceOfPlayingNextRound         int            `json:"chanceOfPlayingNextRound"`
	ChanceOfPlayingThisRound         int            `json:"chanceOfPlayingThisRound"`
	CostChangeEvent                  int            `json:"costChangeEvent"`
	CostChangeEventFall              int            `json:"costChangeEventFall"`
	CostChangeStart                  int            `json:"costChangeStart"`
	CostChangeStartFall              int            `json:"costChangeStartFall"`
	DreamteamCount                   int            `json:"dreamteamCount"`
	ElementType                      int            `json:"elementType"`
	EpNext                           string         `json:"epNext"`
	EpThis                           string         `json:"epThis"`
	EventPoints                      int            `json:"eventPoints"`
	Form                             string         `json:"form"`
	InDreamteam                      bool           `json:"inDreamteam"`
	NowCost                          int            `json:"nowCost"`
	Photo                            string         `json:"photo"`
	PointsPerGame                    string         `json:"pointsPerGame"`
	SelectedByPercent                string         `json:"selectedByPercent"`
	Special                          bool           `json:"special"`
	SquadNumber                      int            `json:"squadNumber"`
	Status                           string         `json:"status"`
	TeamCode                         int            `json:"teamCode"`
	TotalPoints                      int            `json:"totalPoints"`
	TransfersIn                      int            `json:"transfersIn"`
	TransfersInEvent                 int            `json:"transfersInEvent"`
	TransfersOut                     int            `json:"transfersOut"`
	TransfersOutEvent                int            `json:"transfersOutEvent"`
	ValueForm                        string         `json:"valueForm"`
	ValueSeason                      string         `json:"valueSeason"`
	Minutes                          int            `json:"minutes"`
	GoalsScored                      int            `json:"goalsScored"`
	Assists                          int            `json:"assists"`
	CleanSheets                      int            `json:"cleanSheets"`
	GoalsConceded                    int            `json:"goalsConceded"`
	OwnGoals                         int            `json:"ownGoals"`
	PenaltiesSaved                   int            `json:"penaltiesSaved"`
	PenaltiesMissed                  int            `json:"penaltiesMissed"`
	YellowCards                      int            `json:"yellowCards"`
	RedCards                         int            `json:"redCards"`
	Saves                            int            `json:"saves"`
	Bonus                            int            `json:"bonus"`
	Bps                              int            `json:"bps"`
	Influence                        string         `json:"influence"`
	Creativity                       string         `json:"creativity"`
	Threat                           string         `json:"threat"`
	IctIndex                         string         `json:"ictIndex"`
	Starts                           int            `json:"starts"`
	ExpectedGoals                    string         `json:"expectedGoals"`
	ExpectedAssists                  string         `json:"expectedAssists"`
	ExpectedGoalInvolvements         string         `json:"expectedGoalInvolvements"`
	ExpectedGoalsConceded            string         `json:"expectedGoalsConceded"`
	InfluenceRank                    int            `json:"influenceRank"`
	InfluenceRankType                int            `json:"influenceRankType"`
	CreativityRank                   int            `json:"creativityRank"`
	CreativityRankType               int            `json:"creativityRankType"`
	ThreatRank                       int            `json:"threatRank"`
	ThreatRankType                   int            `json:"threatRankType"`
	IctIndexRank                     int            `json:"ictIndexRank"`
	IctIndexRankType                 int            `json:"ictIndexRankType"`
	CornersAndIndirectFreekicksOrder int            `json:"cornersAndIndirectFreekicksOrder"`
	CornersAndIndirectFreekicksText  string         `json:"cornersAndIndirectFreekicksText"`
	DirectFreekicksOrder             int            `json:"directFreekicksOrder"`
	DirectFreekicksText              string         `json:"directFreekicksText"`
	PenaltiesOrder                   int            `json:"penaltiesOrder"`
	PenaltiesText                    string         `json:"penaltiesText"`
	ExpectedGoalsPer90               float64        `json:"expectedGoalsPer90"`
	SavesPer90                       float64        `json:"savesPer90"`
	ExpectedAssistsPer90             float64        `json:"expectedAssistsPer90"`
	ExpectedGoalInvolvementsPer90    float64        `json:"expectedGoalInvolvementsPer90"`
	ExpectedGoalsConcededPer90       float64        `json:"expectedGoalsConcededPer90"`
	GoalsConcededPer90               float64        `json:"goalsConcededPer90"`
	NowCostRank                      int            `json:"nowCostRank"`
	NowCostRankType                  int            `json:"nowCostRankType"`
	FormRank                         int            `json:"formRank"`
	FormRankType                     int            `json:"formRankType"`
	PointsPerGameRank                int            `json:"pointsPerGameRank"`
	PointsPerGameRankType            int            `json:"pointsPerGameRankType"`
	SelectedRank                     int            `json:"selectedRank"`
	SelectedRankType                 int            `json:"selectedRankType"`
	StartsPer90                      float64        `json:"startsPer90"`
	CleanSheetsPer90                 float64        `json:"cleanSheetsPer90"`
}

// Root type for all queries in the schema, providing entry points to fetch data about teams, players, events, and more.
type Query struct {
}

// Statistical data for a team in a fixture, categorized by various metrics.
type Stat struct {
	Identifier *string     `json:"identifier,omitempty"`
	TeamA      []*TeamStat `json:"teamA,omitempty"`
	TeamH      []*TeamStat `json:"teamH,omitempty"`
}

// Statistics of a football team including its name, value, and a description.
type StatsTeam struct {
	Name        string  `json:"name"`
	Value       float64 `json:"value"`
	Description string  `json:"description"`
}

// Represents a football team with various attributes including strength and performance metrics.
type Team struct {
	ID                  int    `json:"id"`
	Name                string `json:"name"`
	ShortName           string `json:"shortName"`
	StrengthOverallHome int    `json:"strengthOverallHome"`
	StrengthOverallAway int    `json:"strengthOverallAway"`
	StrengthAttackHome  int    `json:"strengthAttackHome"`
	StrengthAttackAway  int    `json:"strengthAttackAway"`
	StrengthDefenceHome int    `json:"strengthDefenceHome"`
	StrengthDefenceAway int    `json:"strengthDefenceAway"`
	PulseID             int    `json:"pulseID"`
}

// Represents a single statistic for a team in a fixture.
type TeamStat struct {
	Value   *int `json:"value,omitempty"`
	Element *int `json:"element,omitempty"`
}

// Detailed information about a top-performing element (player or team) in a particular context.
type TopElementInfo struct {
	ID     int `json:"id"`
	Points int `json:"points"`
}

// Enumeration for player positions in a football game.
type PlayerPosition string

const (
	PlayerPositionGkp PlayerPosition = "GKP"
	PlayerPositionDef PlayerPosition = "DEF"
	PlayerPositionMid PlayerPosition = "MID"
	PlayerPositionFwd PlayerPosition = "FWD"
)

var AllPlayerPosition = []PlayerPosition{
	PlayerPositionGkp,
	PlayerPositionDef,
	PlayerPositionMid,
	PlayerPositionFwd,
}

func (e PlayerPosition) IsValid() bool {
	switch e {
	case PlayerPositionGkp, PlayerPositionDef, PlayerPositionMid, PlayerPositionFwd:
		return true
	}
	return false
}

func (e PlayerPosition) String() string {
	return string(e)
}

func (e *PlayerPosition) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlayerPosition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlayerPosition", str)
	}
	return nil
}

func (e PlayerPosition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
